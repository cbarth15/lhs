Game differences
----------------------------
Game2

-Danger is defined for each soldier.

Danger function within game2.cpp:

	double p = 1;
		//p is part of the probability of survival
		//scales exponentially with fear

     const double s2 = stealth * stealth;
		//the soldier's own stealth squared
     for ( auto j : enemies )
     {
		//for all enemies
         if ( j.dead ) continue;
		//if a soldier is dead it can not threatn you
         double r2 = dist2(ps, j.pos);
		//the distance squared between me and the enemy
         p *= 1 - accuracy * std::exp( -r2 / s2 );
			//a higher stealth makes p lower
			//accuracy is used as a guess of enemy accuracy
     }
 
     double q = 1;
     for ( int j = 0; j < fear; j++ ) q *= p;
			//higher fear lowers q
			//a higher stealth will make this smaller
 
     return 1 - q;
			//this will be higher at the end with higher stealth
			//more distance (r2) will make this smaller at the end
-----------------------------------------------------------
Game2
-uses a multimap data structure to speed up soldier movements

-----------------------------------------------------------
Game1
-Here is the danger function for game 1 (within soldier::move)

Danger Function within game1.cpp:
	//appears identically to game2
   for ( int i = 0; i < possible.size(); i++ )
     {
         double p = 1;
 
         const double s2 = stealth * stealth;
         for ( auto j : enemies )
         {
             if ( j.dead ) continue;
             double r2 = dist2(possible[i], j.pos);
             p *= 1 - accuracy * std::exp( -r2 / s2 );
         }
 
         double q = 1;
         for ( int j = 0; j < fear; j++ ) q *= p;
 
         prob[i] = 1 - q;
     }
-------------------------------------------
Game2
-picking a possible move

possible move picking within game2.cpp:

 for ( auto i : possible )
     {
	//appears to go through all moves
	//and use the last move in the list of all moves
	//that is smaller than the random number

	//in other words, even though one position could have a 
	//higher survival possibility, if it comes before another move
	//that has less survival possibility but is < a random number
	//the move with the higher survival possibility(which is a smaller
	// number)
	// is not taken
         double dang = danger(i.second, enemies);
         if ( dang < (*rnd)() )
         {
             next = i.second;
             found = true;
             break;
         }
     }
------------------------------------------------
Game1
-picking possible moves

code from game1.cpp:
//compares all values to a random number just like in game 2
 for ( int i = 0; i < possible.size(); i++ )
     {
         if ( prob[i] < (*rnd)() ) poss2.push_back(possible[i]);
     }
 
     //cout<<"AAA "<<possible.size()<<' '<<poss2.size()<<'\n';
 
     if ( poss2.empty() ) // panic
     {
         next = pos;
         return "";
     }
 			//however, at this part the highest chance of
			//survival (the smallest number) is chosen
			//by going through the array of possible moves
			//and picking which one minimizes the distance to
			//the base
     double rmin2 = 1e6;
     for ( auto i : poss2 )
     {
         double r2 = dist2(i, base);
         if ( r2 < rmin2 )
         {
             rmin2 = r2;
             next = i;
         }
     }
--------------------------------------------------
